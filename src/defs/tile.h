/*
 *  @file TILE.H
 *  @author Michael Yoder, Seth Yoder
 *
 *
 *  @section LICENSE
 *  This file is part of ROGUELIKETHING.
 *
 *  ROGUELIKETHING is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  ROGUELIKETHING is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with ROGUELIKETHING.  If not, see <http://www.gnu.org/licenses/>.
 */

#ifndef TILE_H
#define TILE_H

struct Tile {
        /**
         * The number of the tile corresponding to a character mapping.
         * The character of the tile is generated by ascii_lib which is
         * included in the lib/ folder.
         */
        int char_count;

        /**
         * A sequential id assigned to tiles for accessing them.
         */
        int tile_id;

         /**
         * The color of the tile.
         * An integer which corresponds to the color of the tile.  It is a 24 bit
         * binary number where each 8 bits represents, R, G, or B which has been
         * converted into decimal.
         */
        int color;

        /**
         * Whether or not a character can move through the tile.
         */
        bool corporeal;

        /**
         * If the tile is currently visible.
         * Tiles will be marked as visible if they can currently be seen by the
         * main character.  Otherwise, this will be false.
         */
        bool visible;

        /**
         * True if light can pass through the tile.
         * This value is used by the lighting system to determine whether or not
         * a particular tile should have light pass through it.
         */
        bool opaque;

        /**
         * True if the main character has, at some point, seen the tile.
         * If this is true, then the tile will be grayed out when it is
         * not visible.  Otherwise, a solid black rectangle will be rendered
         * instead of the tile.
         */
        bool seen;

        /**
         * True if this tile is at the floor level - this is used to determine if a
         * spawner or stairs can be placed here.
         */
        bool can_build_overtop;

        /**
         * The comparison operator for tiles.
         */
        bool operator==(const Tile& rhs) const {
            return this->tile_id == rhs.tile_id;
        }

        bool operator!=(const Tile& rhs) const{
            return this->tile_id != rhs.tile_id;
        }
};

#endif
